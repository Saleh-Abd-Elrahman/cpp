<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespacezip_f" kind="namespace" language="C++">
    <compoundname>zipF</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacezip_f_1a23d76f361e5e9ff66c49db8b11798239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; zipF::readBook</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>readBook</name>
        <qualifiedname>zipF::readBook</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Reads a text file and extracts only alphabetic characters. Non-alphabetic characters are replaced with spaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the text file to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector of alphabetic characters from the file with only letters kept. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="13" column="13" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="13" bodyend="28" declfile="/Users/salehabdelrahman/Desktop/oct29/include/ZipF.h" declline="18" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacezip_f_1a3e948b8730a57a51bb29eee0d1c46231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt; std::string, int &gt; zipF::computeWordFrequency</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;book)</argsstring>
        <name>computeWordFrequency</name>
        <qualifiedname>zipF::computeWordFrequency</qualifiedname>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>book</declname>
        </param>
        <briefdescription>
<para>Counts how often each word appears in the text. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>It splits the content into words based on spaces.</para>
</listitem><listitem><para>Then it counts how many times each word appears in the text. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>book</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of characters representing the book content. (letters only) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Map with words as keys and their frequencies as values. </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="31" column="10" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="31" bodyend="50" declfile="/Users/salehabdelrahman/Desktop/oct29/include/ZipF.h" declline="27" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacezip_f_1a7cceebdfbad9c5633de1054f92cbcbb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int zipF::countUniqueWords</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;book)</argsstring>
        <name>countUniqueWords</name>
        <qualifiedname>zipF::countUniqueWords</qualifiedname>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>book</declname>
        </param>
        <briefdescription>
<para>Counts the number of unique words in text. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>book</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of characters representing the book content. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total count of unique words in the book. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="52" column="5" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="52" bodyend="68" declfile="/Users/salehabdelrahman/Desktop/oct29/include/ZipF.h" declline="34" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacezip_f_1a2b23347e83d0c110f8b0c720c4832405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt;</type>
        <definition>std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; zipF::sortFrequencies</definition>
        <argsstring>(const std::map&lt; std::string, int &gt; &amp;frequencies)</argsstring>
        <name>sortFrequencies</name>
        <qualifiedname>zipF::sortFrequencies</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, int &gt; &amp;</type>
          <declname>frequencies</declname>
        </param>
        <briefdescription>
<para>Sorts words by their frequency, from most to least frequent. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>This function takes in a map of words (keys) and their frequencies (values).</para>
</listitem></itemizedlist>
</para>
<para>It creates a new sorted list of words, organized by frequency in descending order.<itemizedlist>
<listitem><para>Words with the same frequency are grouped together. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of words and their corresponding frequencies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Multimap with frequencies as keys and words as values. </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="70" column="15" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="70" bodyend="76" declfile="/Users/salehabdelrahman/Desktop/oct29/include/ZipF.h" declline="45" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacezip_f_1a19015b3670ffda24078224fbb835cb25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zipF::outputFrequencies</definition>
        <argsstring>(const std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; &amp;sortedFreq, const std::string &amp;outputFileName)</argsstring>
        <name>outputFrequencies</name>
        <qualifiedname>zipF::outputFrequencies</qualifiedname>
        <param>
          <type>const std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; &amp;</type>
          <declname>sortedFreq</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFileName</declname>
        </param>
        <briefdescription>
<para>Writes the sorted frequencies to a file in &quot;rank freq word&quot; format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sortedFrequencies</parametername>
</parameternamelist>
<parameterdescription>
<para>A sorted multimap with words and their frequencies, from most to least frequent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the output file to save. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="78" column="6" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="78" bodyend="91" declfile="/Users/salehabdelrahman/Desktop/oct29/include/ZipF.h" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacezip_f_1aeca28206be07d18f31d2825d1cbabd56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zipF::plotFrequencies</definition>
        <argsstring>(const std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; &amp;sortedFreq)</argsstring>
        <name>plotFrequencies</name>
        <qualifiedname>zipF::plotFrequencies</qualifiedname>
        <param>
          <type>const std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; &amp;</type>
          <declname>sortedFreq</declname>
        </param>
        <briefdescription>
<para>Prints words that occur only once (hapax legomena) in the sorted frequency list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sortedFrequencies</parametername>
</parameternamelist>
<parameterdescription>
<para>A sorted multimap with words and their frequencies. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="94" column="6" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="94" bodyend="119" declfile="/Users/salehabdelrahman/Desktop/oct29/include/ZipF.h" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacezip_f_1a17b6d4f2b1e29746390b0f97b7ada6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zipF::printHapaxLegomena</definition>
        <argsstring>(const std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; &amp;sortedFreq)</argsstring>
        <name>printHapaxLegomena</name>
        <qualifiedname>zipF::printHapaxLegomena</qualifiedname>
        <param>
          <type>const std::multimap&lt; int, std::string, std::greater&lt;&gt; &gt; &amp;</type>
          <declname>sortedFreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="122" column="6" bodyfile="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" bodystart="122" bodyend="135"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/salehabdelrahman/Desktop/oct29/homework/ZipF_Law.cpp" line="11" column="1"/>
  </compounddef>
</doxygen>
